{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "// JavaScript code for simulation\nsimulate=function(){\t\n\n\t      // Get canvas element\n\t      const canvas = document.getElementById('simulationCanvas');\n\t      const ctx = canvas.getContext('2d');\n\t\n\t      let x = canvas.width / 1.5;\n\t      let y = canvas.height - 30;\n\n  \t\t  let x_ = [];\n  \t\t  let y_ = [];\n  \t\t  let xa_ = [];\n  \t\t  let ya_ = [];\n\t\n  \t\t  let cr_ = [];\n    \t  let cg_ = [];\n  \t\t  let cb_ = [];\n\n\t      // Set ball radius\n\t      const ballRadius = 5;\n  \n  \t\t  const speed = 0.1;\n\t\n  \t\t  const c = 10; // number of elements\n  \n\t\t  function init() {\n\t\t\tfor (i = 0;i<c;i++) {\n\t\t\t\tx_[i] = Math.random() * 400;\n\t\t\t    y_[i] = Math.random() * 400;\n\t\t\t    xa_[i] = 0;\n\t\t\t    ya_[i] = 0;\n\t\t\t  \n\t\t\t    cr_[i] = Math.floor(Math.random() * 256);\n\t\t\t  \tcg_[i] = Math.floor(Math.random() * 256);\n\t\t\t  \tcb_[i] = Math.floor(Math.random() * 256);\n\n  \t\t\t}\n\t\t  }\n  \n    \t  init();\n  \n\t      // Function to draw the ball\n\t      function drawBall() {\n\t\t\tfor (i=0;i<c;i++) {\n\t    \t\tctx.beginPath();\n\t      \t\tctx.arc(x_[i], y_[i], ballRadius, 0, Math.PI * 2);\n\t     \t\t//ctx.fillStyle = 'blue';\n\t\t\t  ctx.fillStyle = \"rgb(\"+cr_[i]+\",\"+cg_[i]+\",\"+cb_[i]+\")\";\n\t      \t\tctx.fill();\n\t     \t\tctx.closePath();\n\t\t\t}\n\t      }\n\t\n\t      // Function to update ball position\n\t      function updateBallPosition() {\n\t        // Clear canvas\n\t        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\n\t        // Draw ball\n\t        drawBall();\n\t\n\t\t\t\n\t\t\tfor (a=0;a<c;a++) {\n\t\t\t  for  (b=0;b<c;b++) {\n\t\t\t\tif (a == b) continue;\n\t\t\t\t\tlet d = Math.sqrt(Math.pow(x_[a]-x_[b],2) + Math.pow(y_[a]-y_[b],2));\n\n\t\t\t\t\txa_[a] = xa_[a] + (x_[b]-x_[a]) / d;\n\t\t\t\t\tya_[a] = ya_[a] + (y_[b]-y_[a]) / d;\n\n\t\t\t\t\txa_[b] = xa_[b] + (x_[a]-x_[b]) / d;\n\t\t\t\t\tya_[b] = ya_[b] + (y_[a]-y_[b]) / d;\n\n\t\t\t  }\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t  for (b=0;b<c;b++) {\n\t\t\t\t//xa_[b] = 0.1;\n\t\t\t\tx_[b] = x_[b] + xa_[b]*speed;\n\t\t\t\ty_[b] = y_[b] + ya_[b]*speed;\n\t\t\t  }\n\t\t\t\n\t\t\n\t\t\t\n\t\n\t\t\t/*\n\t        // Reverse direction if ball hits canvas edges\n\t        if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {\n\t          dx = -dx;\n\t        }\n\t        if (y + dy > canvas.height - ballRadius || y + dy < ballRadius) {\n\t          dy = -dy;\n\t        }*/\n\t\t\t\n\t\t  }\n\t\n\t      // Call updateBallPosition function repeatedly for animation\n\t      setInterval(updateBallPosition, 10);\n}",
      "status": "[3]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "function(){\t\n\n\t      // Get canvas element\n\t      const canvas = document.getElementById('simulationCanvas');\n\t      const ctx = canvas.getContext('2d');\n\t\n\t      let x = canvas.width / 1.5;\n\t      let y = canvas.height - 30;\n\n  \t\t  let x_ = [];\n  \t\t  let y_ = [];\n  \t\t  let xa_ = [];\n  \t\t  let ya_ = [];\n\t\n  \t\t  let cr_ = [];\n    \t  let cg_ = [];\n  \t\t  let cb_ = [];\n\n\t      // Set ball radius\n\t      const ballRadius = 5;\n  \n  \t\t  const speed = 0.1;\n\t\n  \t\t  const c = 10; // number of elements\n  \n\t\t  function init() {\n\t\t\tfor (i = 0;i<c;i++) {=\"\" x_[i]=\"Math.random()\" *=\"\" 400;=\"\" y_[i]=\"Math.random()\" xa_[i]=\"0;\" ya_[i]=\"0;\" cr_[i]=\"Math.floor(Math.random()\" 256);=\"\" cg_[i]=\"Math.floor(Math.random()\" cb_[i]=\"Math.floor(Math.random()\" }=\"\" init();=\"\" function=\"\" to=\"\" draw=\"\" the=\"\" ball=\"\" drawball()=\"\" for=\"\" (i=\"0;i<c;i++)\" ctx.beginpath();=\"\" ctx.arc(x_[i],=\"\" y_[i],=\"\" ballradius,=\"\" 0,=\"\" math.pi=\"\" 2);=\"\" ctx.fillstyle=\"blue\" ;=\"\" +cr_[i]+\",\"+cg_[i]+\",\"+cb_[i]+\")\";=\"\" ctx.fill();=\"\" ctx.closepath();=\"\" update=\"\" position=\"\" updateballposition()=\"\" clear=\"\" canvas=\"\" ctx.clearrect(0,=\"\" canvas.width,=\"\" canvas.height);=\"\" drawball();=\"\" (a=\"0;a<c;a++)\" (b=\"0;b<c;b++)\" if=\"\" b)=\"\" continue;=\"\" let=\"\" d=\"Math.sqrt(Math.pow(x_[a]-x_[b],2)\" +=\"\" math.pow(y_[a]-y_[b],2));=\"\" xa_[a]=\"xa_[a]\" (x_[b]-x_[a])=\"\" d;=\"\" ya_[a]=\"ya_[a]\" (y_[b]-y_[a])=\"\" xa_[b]=\"xa_[b]\" (x_[a]-x_[b])=\"\" ya_[b]=\"ya_[b]\" (y_[a]-y_[b])=\"\" x_[b]=\"x_[b]\" xa_[b]*speed;=\"\" y_[b]=\"y_[b]\" ya_[b]*speed;=\"\" reverse=\"\" direction=\"\" hits=\"\" edges=\"\" (x=\"\" dx=\"\"> canvas.width - ballRadius || x + dx &lt; ballRadius) {\n\t          dx = -dx;\n\t        }\n\t        if (y + dy &gt; canvas.height - ballRadius || y + dy &lt; ballRadius) {\n\t          dy = -dy;\n\t        }*/\n\t\t\t\n\t\t  }\n\t\n\t      // Call updateBallPosition function repeatedly for animation\n\t      setInterval(updateBallPosition, 10);\n} </c;i++)><br>",
      "type": "code"
    },
    {
      "code": "simulate()\ndocument.activeElement.blur(); \ndocument.body.scrollTop = document.documentElement.scrollTop = 0;",
      "status": "[-]",
      "output": "<p class=\"error\">null is not an object (evaluating 'canvas.getContext')</p>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}